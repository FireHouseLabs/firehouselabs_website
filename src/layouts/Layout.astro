---
import '@fontsource/inter/latin-400.css';
import '@fontsource/inter/latin-500.css';
import { ViewTransitions } from 'astro:transitions';
import { SEO } from "astro-seo";
import Footer from '../components/layout/Footer.astro';
import Header from '../components/layout/Header.astro';

interface Props {
  description: string;
  title: string;
}

const { description, title } = Astro.props as Props;
---

<!DOCTYPE html>
<html lang="en" x-cloak x-data :class="{ 'dark': $store.theme.isDark }">
  <head>
    <SEO
      title={title}
      titleTemplate="%s | fireHouse Labs"
      description={description}
      canonical={Astro.url.href}
      openGraph={{
        basic: {
          title: title,
          type: "website",
          image: "/assets/fhl_logo_dark.png",
          url: Astro.url.href,
        },
        optional: {
          description: description,
          locale: "en_US",
          siteName: "fireHouse Labs",
        },
        image: {
          alt: "fireHouse Labs Logo",
        }
      }}
      twitter={{
        card: "summary_large_image",
        site: "@firehouselabs",
        creator: "@firehouselabs"
      }}
      extend={{
        link: [
          { rel: "icon", href: "/favicon.ico" },
          { rel: "apple-touch-icon", href: "/apple-touch-icon.png", sizes: "180x180" },
          { rel: "icon", type: "image/png", href: "/favicon-32x32.png", sizes: "32x32" },
          { rel: "icon", type: "image/png", href: "/favicon-16x16.png", sizes: "16x16" },
          { rel: "manifest", href: "/site.webmanifest" }
        ],
        meta: [
          { name: "viewport", content: "width=device-width" },
          { name: "generator", content: Astro.generator },
          { name: "robots", content: "index,follow" },
          { name: "googlebot", content: "index,follow" },
          { name: "color-scheme", content: "dark light" },
          { property: "og:site_name", content: "fireHouse Labs" },
          { property: "og:locale", content: "en_US" },
          { name: "format-detection", content: "telephone=no" }
        ],
      }}
    />
    <meta charset="utf-8" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <script src="https://unpkg.com/@botpoison/browser" async></script>
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-Y82PCFDRJB"></script>
    <script is:inline>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());

      gtag('config', 'G-Y82PCFDRJB');

      // Track page views during client-side navigation with ViewTransitions
      document.addEventListener('astro:page-load', () => {
        if (typeof gtag !== 'undefined') {
          gtag('config', 'G-Y82PCFDRJB', {
            page_location: window.location.href,
            page_title: document.title
          });
        }
      });
    </script>
    <title>{title}</title>
    <ViewTransitions />
  </head>
  <body
    class="bg-primary-50 text-primary-950 dark:bg-primary-950 dark:text-primary-200 antialiased transition"
  >
    <Header />
    <main>
      <slot />
    </main>
    <Footer />
    <style is:global>
      [x-cloak] {
        display: none !important;
      }
    </style>
    <script>
      import Alpine from 'alpinejs';
      import collapse from '@alpinejs/collapse';

      Alpine.plugin(collapse);

      Alpine.store('theme', {
        init(this: { isDark: boolean }) {
          this.isDark = (() => {
            if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
              return localStorage.getItem('theme') === 'dark';
            }
            if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
              return true;
            }
            return false;
          })();
        },

        isDark: false,

        toggle(this: { isDark: boolean }) {
          this.isDark = !this.isDark;
          localStorage.setItem('theme', this.isDark ? 'dark' : 'light');
        },
      } as { isDark: boolean });

      declare global {
        interface Window {
          Alpine: typeof Alpine;
        }
      }

      window.Alpine = Alpine;
      Alpine.start();
    </script>
  </body>
</html>
